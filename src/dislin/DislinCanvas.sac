class DislinCanvas;

classtype int;

use DislinSystem: all except{color};
use DislinPage: all;
use Structures: all;

export all;

/******************************************************************************/

DislinCanvas createPdfFile()
{
  return( createFile( "pdf"));
}

DislinCanvas createFile( string format)
{
  return( createCanvas( createPage(), format));
}

DislinCanvas createDisplay()
{
  return( createDisplay( createPage()));
}

void registerDisplay( int winid)
{
  status = getGlobalStatus();
  status[ winid] = true;
  setGlobalStatus( status );
}

void unregisterDisplay( DislinCanvas disp)
{
  winid = from_DislinCanvas( disp);
  status = getGlobalStatus();
  status[ winid] = false;
  setGlobalStatus( status );
}

DislinCanvas createCanvas( DislinPage page, string format)
{
  status = getGlobalStatus();
  if( !any(status) ) {
    metafl( format);
    if( sizeNormed( page)) {
      setpag( getNorm( page));
    } else {
      w,h = getSize( page);
      page( w, h);
    }
    disini();
    if( hasBorder( page)) {
      pagera();
    }
    status[1] = true;
    winid = 1;
  } else {
    if( format == "xwin") {
      winid = 1;
      while( status[winid] && (winid < 9)) {
        winid++;
      }
      if( winid < 9) {
        opnwin( winid);
        status[winid] = true;
      } else {
        /* cannot open more than 8 windows at a time! */
        winid = 0;
      }
    } else {
      /* only one non-X11 canvas at a time! */
      winid = 0;
    }
  }
  setGlobalStatus( status );

  return( to_DislinCanvas( winid));
}

DislinCanvas createDisplay( DislinPage page)
{
  return( createCanvas( page, "xwin"));
}

void activateDisplay( DislinCanvas & disp)
{
  winid = from_DislinCanvas( disp);
  selwin( winid);
  disp = to_DislinCanvas( winid);
}

void clearDisplay( DislinCanvas &disp)
{
  activateDisplay( disp);
  erase();
}

void destroyDisplay( DislinCanvas disp)
{
  winid = from_DislinCanvas( disp);
  if( winid > 1) {
    clswin( winid);
  }
  status = getGlobalStatus();
  status[winid] = false;
  if( !any(status) ) {
    disfin();
  } 
}

