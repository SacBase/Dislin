class DislinCanvas;

classtype int;

use DislinSystem: all;
use DislinPage: all;
use String: {string};
use Array: all;

export all;

/******************************************************************************/

DislinCanvas createPdfFile()
{
  return( createFile( "pdf"));
}

DislinCanvas createFile( string format)
{
  return( createFile( createPage(), format));
}

DislinCanvas createDisplay()
{
  return( createDisplay( createPage()));
}

void registerDisplay( int winid)
{
  status = getGlobalStatus();
  status[ winid] = true;
  setGlobalStatus( status );
}

void unregisterDisplay( DislinCanvas disp)
{
  winid = from_DislinCanvas( disp);
  status = getGlobalStatus();
  status[ winid] = false;
  setGlobalStatus( status );
}

DislinCanvas createFile( DislinPage page, string format)
{
  status = getGlobalStatus();
  if( !any(status) ) {
    metafl( format);
    if( sizeNormed( page)) {
      setpag( getNorm( page));
    } else {
      w,h = getSize( page);
      page( w, h);
    }
    disini();
    status[0] = true;
  } else {
    /* error : only one canvas at a time! */
  }
  setGlobalStatus( status );

  return( to_DislinCanvas( 0));
}

DislinCanvas createDisplay( DislinPage page)
{
  status = getGlobalStatus();
  if( !any(status) ) {
    metafl( "xwin");
    if( sizeNormed( page)) {
      setpag( getNorm( page));
    } else {
      w,h = getSize( page);
      page( w, h);
    }
    disini();
    if( hasBorder( page)) {
      pagera();
    }
    status[1] = true;
    winid = 1;
  } else {
    opnwin( 2);
    status[2] = true;
    winid = 2;
  }
  setGlobalStatus( status );

  return( to_DislinCanvas( winid));
}

void activateDisplay( DislinCanvas & disp)
{
  winid = from_DislinCanvas( disp);
  selwin( winid);
  disp = to_DislinCanvas( winid);
}

void clearDisplay( DislinCanvas &disp)
{
  activateDisplay( disp);
  erase();
}

void destroyDisplay( DislinCanvas disp)
{
  winid = from_DislinCanvas( disp);
  clswin( winid);
  status = getGlobalStatus();
  status[winid] = false;
  if( !any(status) ) {
    disfin();
  } 
}

