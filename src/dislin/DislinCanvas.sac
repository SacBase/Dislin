class DislinCanvas;

classtype int;

use DislinSystem: all;
use DislinPage: all;
use String: {string};
use Array: all;

export { DislinCanvas, createDisplay, clearDisplay, destroyDisplay };

/******************************************************************************/

DislinCanvas createPdfFile()
{
  return( createFile( "pdf"));
}

DislinCanvas createFile( string format)
{
  return( createFile( createPage(), format));
}

DislinCanvas createDisplay()
{
  return( createDisplay( createPage()));
}

DislinCanvas createFile( DislinPage page, string format)
{
  status = getGlobalStatus();
  if( !any(status) ) {
    metafl( format);
    if( hasNorm( page)) {
      setpag( getNorm( page));
    } else {
      page( getWidth( page), getHeight( page));
    }
    disini();
    status[0] = true;
  } else {
    /* error : only one canvas at a time! */
  }
  setGlobalStatus( status );

  return( to_DislinCanvas( 0));
}

DislinCanvas createDisplay( DislinPage page)
{
  status = getGlobalStatus();
  if( !any(status) ) {
    metafl( "xwin");
    if( hasNorm( page)) {
      setpag( getNorm( page));
    } else {
      page( getWidth( page), getHeight( page));
    }
    disini();
    status[1] = true;
    winid = 1;
  } else {
    opnwin( 2);
    winid = 2;
  }
  setGlobalStatus( status );

  return( to_DislinCanvas( winid));
}

void clearDisplay( DislinCanvas &disp)
{
  winid = from_DislinCanvas( disp);
  selwin( winid);
  erase();
  disp = to_DislinCanvas( winid);
}

void destroyDisplay( DislinCanvas disp)
{
  winid = from_DislinCanvas( disp);
  clswin( winid);
  status = getGlobalStatus();
  status[winid] = false;
  if( !any(status) ) {
    disfin();
  } 
}

